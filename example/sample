


.prog {
   .duck {
      .x b.d {
         .a 5
      }
      .b { .a 9 }
      
   }
   .b {
      .a 10
      .k d {}
      .d {
         .a
         .m 9
      }
   }
}


;;; :e |f32| f32
.e !! 1 + (×) // 1÷ (+) / 1 +



.quad {
	:a :b :c f32

	.dis b 2 * [4 a c] (×) / -
	.squ dis 0.5 *
	.den 2 a ×

	.pos b 0- squ - den ÷
	.neg b 0- squ + den ÷
}

;;; prog: {
;;;    duck: {
;;;       x: b.d {
;;;          a: 5
;;;       }
;;;       b. { a: 9 }
      
;;;    }
;;;    b: {
;;;       a: 10
;;;       k: d {}
;;;       d: {
;;;          a.
;;;          m: 9
;;;       }
;;;    }
;;; }

;;; group: { a. b. c. }
;;; group: { a, b, c }
;;; :group { .a .b .c }
;;; :group { ..a ..b ..c }
;;; .group { :a :b :c }


;;; groupxsdf


;;; :prog {
;;;    :duck {
;;;       :x b.d {
;;;          :a 5
;;;       }
;;;       .b {
;;;          :a 9
;;;       }

;;;    }
;;;    :b {
;;;       :a 10
;;;          :k d { }
;;;       :d {
;;;          .a
;;;          :m 9
;;;       }
;;;    }
;;; }

;;; prog: {
;;;    duck: {
;;;       x: b.d {
;;;          a: 5
;;;       }
;;;       b {
;;;          a: 9
;;;       }
;;;    }
;;;    b: {
;;;       a: 10
;;;       k: d { }
;;;       d: {
;;;          a
;;;          m: 9
;;;       }
;;;    }
;;; }







;;; .y x {
;;; 	.a 4
;;; }


;;; .b a.data

;;; .a {
;;; 	.data 10
;;; }

;;; .object-a {
;;; 	.one 1
;;; 	.two 2
;;; }

;;; .object-b {
;;; 	.b {
;;; 		.c {
;;; 			.k 90
;;; 		}
;;; 	}
;;; 	.a
;;; 	.c 12
;;; }

;;; .duck object-b {
;;; 	.b {
;;; 		.d 0
;;; 	}
;;; }


;;; .constant {
;;;    .e (+ 1 (fold + (%% (scan * (!!)))))
;;; }


;;; .constant {
;;; 	.e !! (*) scan %% (+) fold 1 +
;;; }

;;; .add |x y| x y |x| x 2 *

;;; .quad {
;;; 	.a f32
;;; 	.b f32
;;; 	.c f32

;;; 	.dis b 2 ^ 4 [a c] (*) fold -
;;; 	.squ dis 0.5 ^
;;; 	.den 2 a *

;;; 	.pos b ~ squ - den %
;;; 	.neg b ~ squ + den %
;;; }


;;; .result quad {
;;; 	.a 1
;;; 	.b 5
;;; 	.c 3
;;; }